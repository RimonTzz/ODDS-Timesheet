<div class="auth-container">
    <div class="logo">
    <%= image_tag "icon/timesheet.svg", width: 200 %>
  </div>
  <div class="auth-header">
    <h2 class="auth-title">Register</h2>
  </div>


  <div class="auth-form-container">
    <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { class: "auth-form" }) do |f| %>
      <%= render "devise/shared/error_messages", resource: resource %>

      <div class="form-group">
        <%= f.label :first_name, "First name *", class: "form-label" %>
        <div class="form-input-container">
          <%= f.text_field :first_name, class: "form-input", required: true, placeholder: "First name", data: { action: "blur->form-validation#validate" } %>
          <div class="error-message" data-form-validation-target="firstNameError"></div>
        </div>
      </div>

      <div class="form-group">
        <%= f.label :last_name, "Last name *", class: "form-label" %>
        <div class="form-input-container">
          <%= f.text_field :last_name, class: "form-input", required: true, placeholder: "Last name", data: { action: "blur->form-validation#validate" } %>
          <div class="error-message" data-form-validation-target="lastNameError"></div>
        </div>
      </div>

      <div class="form-group">
        <%= f.label :phone_number, "Telephone number *", class: "form-label" %>
        <div class="form-input-container">
          <%= f.telephone_field :phone_number, class: "form-input", required: true, placeholder: "0XXXXXXXXX", pattern: "[0-9]{10}", data: { action: "blur->form-validation#validate" } %>
          <div class="hint-message">Please enter a valid 10-digit phone number</div>
          <div class="error-message" data-form-validation-target="phoneError"></div>
        </div>
      </div>

      <div class="form-group">
        <%= f.label :email, "Email *", class: "form-label" %>
        <div class="form-input-container">
          <%= f.email_field :email, class: "form-input", required: true, placeholder: "example@odds.team", data: { action: "blur->form-validation#validate" } %>
          <div class="hint-message">Please enter an email address ending with @odds.team</div>
          <div class="error-message" data-form-validation-target="emailError"></div>
        </div>
      </div>

      <div class="form-group">
        <%= f.label :password, "Password *", class: "form-label" %>
        <div class="form-input-container">
          <%= f.password_field :password, class: "form-input", required: true, placeholder: "Password", data: { action: "blur->form-validation#validate" } %>
          <div class="hint-message">Must contain at least 8 characters, one uppercase, one lowercase, and one number</div>
          <div class="error-message" data-form-validation-target="passwordError"></div>
        </div>
      </div>

      <div class="form-group">
        <%= f.label :password_confirmation, "Confirm Password *", class: "form-label" %>
        <div class="form-input-container">
          <%= f.password_field :password_confirmation, class: "form-input", required: true, placeholder: "Confirm Password", data: { action: "blur->form-validation#validate" } %>
          <div class="hint-message">Please enter the password again to confirm</div>
          <div class="error-message" data-form-validation-target="passwordConfirmationError"></div>
        </div>
      </div>

      <%= f.submit "Register", class: "submit-button", data: { disable_with: "Registering..." } %>
    <% end %>

    <div class="auth-link-container">
      Have an account ? <%= link_to "Login", new_session_path(resource_name), class: "auth-link" %>
    </div>
  </div>
</div>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.auth-form');
    const emailInput = form.querySelector('#user_email');
    const phoneInput = form.querySelector('#user_phone_number');
    const passwordInput = form.querySelector('#user_password');
    const passwordConfirmationInput = form.querySelector('#user_password_confirmation');

    // Email validation
    emailInput.addEventListener('blur', function() {
      const email = this.value;
      const emailError = form.querySelector('[data-form-validation-target="emailError"]');

      if (!email) {
        emailError.textContent = 'Please enter an email address';
        return;
      }

      if (!email.endsWith('@odds.team')) {
        emailError.textContent = 'Please enter an email address ending with @odds.team';
        return;
      }

      // Clear error message before checking
      emailError.textContent = '';

      
    });

    // Phone number validation
    phoneInput.addEventListener('blur', function() {
      const phone = this.value;
      const phoneError = form.querySelector('[data-form-validation-target="phoneError"]');
      
      if (!phone) {
        phoneError.textContent = 'Please enter a phone number';
        return;
      }

      if (!/^[0-9]{10}$/.test(phone)) {
        phoneError.textContent = 'Please enter a 10-digit phone number';
      } else {
        phoneError.textContent = '';
      }
    });

    // Password validation
    passwordInput.addEventListener('blur', function() {
      const password = this.value;
      const passwordError = form.querySelector('[data-form-validation-target="passwordError"]');
      
      if (!password) {
        passwordError.textContent = 'Please enter a password';
        return;
      }

      if (password.length < 8) {
        passwordError.textContent = 'Password must be at least 8 characters';
      } else if (!/[A-Z]/.test(password)) {
        passwordError.textContent = 'Password must contain at least one uppercase letter';
      } else if (!/[a-z]/.test(password)) {
        passwordError.textContent = 'Password must contain at least one lowercase letter';
      } else if (!/[0-9]/.test(password)) {
        passwordError.textContent = 'Password must contain at least one number';
      } else {
        passwordError.textContent = '';
      }
    });

    // Password confirmation validation
    passwordConfirmationInput.addEventListener('blur', function() {
      const password = passwordInput.value;
      const confirmation = this.value;
      const confirmationError = form.querySelector('[data-form-validation-target="passwordConfirmationError"]');
      
      if (!confirmation) {
        confirmationError.textContent = 'Please confirm the password';
        return;
      }

      if (password !== confirmation) {
        confirmationError.textContent = 'Passwords do not match';
      } else {
        confirmationError.textContent = '';
      }
    });

    // Form submission
    form.addEventListener('submit', function(e) {
      const errors = form.querySelectorAll('.error-message');
      let hasError = false;

      errors.forEach(error => {
        if (error.textContent) {
          hasError = true;
        }
      });

      if (hasError) {
        e.preventDefault();
      }
    });
  });
<% end %>
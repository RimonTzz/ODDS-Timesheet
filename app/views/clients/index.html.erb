<% if notice %>
  <p class="notice"><%= notice %></p>
<% end %>

<% content_for :title, "Clients" %>

<div class="page-container">
  <div class="page-header">
    <h1 class="page-title">Client list</h1>
    <% if current_user.admin? || current_user.super_admin? %>
      <%= button_tag "New client", class: "new-button", type: "button", onclick: "toggleModal('newClientModal')" %>
    <% end %>
  </div>
  <div class="table-container">
    <table class="table">
      <thead>
        <tr>
          <th>Name</th>
          <th>Contact</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% @clients.each do |client| %>
          <tr>
            <td ><%= client.client_name %></td>
            <td ><%= client.contact_info %></td>
            <td class="table-actions">
                <%= link_to "show", client, class: "action-link show", data: { client_id: client.id }, onclick: "showClientDetails(this); return false;" %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<%= render "new" %>
<%= render "show", client: Client.new %>

<%= javascript_tag do %>
  function toggleModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.style.display = modal.style.display === 'none' ? 'block' : 'none';
    if (modalId === 'newClientModal' && modal.style.display === 'none') {
      resetNewClientForm(); // เรียกฟังก์ชัน Reset Form เมื่อ Modal ถูกปิด
    }
  }

  function resetNewClientForm() {
    const form = document.getElementById('newClientForm');
    if (form) {
      form.reset(); // ใช้ Method reset() ของ Form Element
      // คุณอาจต้องการ Reset Error Messages หรือ Styles ที่เกี่ยวข้องกับ Validation ด้วย
      const errorMessages = form.querySelectorAll('.error-message');
      errorMessages.forEach(message => message.remove());
      const errorInputs = form.querySelectorAll('.form-input.is-invalid'); // สมมติว่าคุณมี Class นี้สำหรับ Input ที่มี Error
      errorInputs.forEach(input => input.classList.remove('is-invalid'));
    }
  }

  function showClientDetails(link) {
    const clientId = link.dataset.clientId;
    const clientDetailContent = document.getElementById('clientDetailContent');
    const clientActionButtons = document.getElementById('clientActionButtons');

    fetch(`/clients/${clientId}.json`)
      .then(response => response.json())
      .then(data => {
        const detailsHTML = `
          <p><strong>ชื่อ:</strong> ${data.client_name}</p>
          <p><strong>ติดต่อ:</strong> ${data.contact_info}</p>
          `;
        clientDetailContent.innerHTML = detailsHTML;
        
        // Add edit and delete buttons
        const buttonsHTML = `
          <a href="/clients/${data.id}/edit" class="action-link" data-turbo="false">แก้ไข</a>
          <form action="/clients/${data.id}" method="post" style="display: inline;" data-turbo="false">
            <input type="hidden" name="_method" value="delete">
            <button type="submit" class="client-action-button" onclick="return confirm('คุณแน่ใจหรือไม่ที่จะลบลูกค้านี้?')">ลบ</button>
          </form>
        `;
        clientActionButtons.innerHTML = buttonsHTML;
        
        toggleModal('detailClientModal');
      })
      .catch(error => {
        console.error("เกิดข้อผิดพลาดในการโหลดรายละเอียดลูกค้า:", error);
        alert("เกิดข้อผิดพลาดในการโหลดรายละเอียดลูกค้า");
      });
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const newClientModal = document.getElementById('newClientModal');
    const detailClientModal = document.getElementById('detailClientModal');
    if (event.target == newClientModal) {
      newClientModal.style.display = "none";
      resetNewClientForm(); // เรียกฟังก์ชัน Reset Form เมื่อคลิกภายนอกเพื่อปิด Modal
    }
    if (event.target == detailClientModal) {
      detailClientModal.style.display = "none";
    }
  }
<% end %>
